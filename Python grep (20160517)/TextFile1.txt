----------------------------- 파이썬의 정규표현식 ------------------------------------
import re를 통해 정규표현식 밑밥깔고

a= re.compile(r"^[a-z]+")

r은 그냥 붙여줌

이런식으로 object하나를 만들어준다.
>>> a= re.compile(r"^[a-z]+")
>>> a
<SRE_Pattern object at 0x02dd99a0>
>>> b= "asdfzc23948192834091234"
>>> b
'asdfzc23948192834091234'
>>> a.search(b)
<SRE_Match object at 0x02e169e8>

서치를 하면 function에서 object를 내보낸다.

matchobj = a.search(b)
print matchobj.group(0)
 -> asdfzc

 group - 정규표현식에서 몇번 그룹을 출력해라인데... 0을 집어넣으면 전체에서 찾아진 애를 집어넣게 된다.
 >>> c
'1234192034898214789122374981743987123472174310784'
 >>> matchobj2 = a.search(c)
>>> print matchobj2
None

없으면 none이라는 놈을 출력.

그룹 여러개면 1,2 이런식.

search 명령어 - 한번만 찾아서
match - greedy. 다 찾아서 저장.

b = "asdf qwerqwer"
a = re.compile(r"([a-z]+)")

>>> print a.search(b).group(0)
asdf
>>> print a.findall(b)
['asdf', 'qwerqwer']
이렇게 묶어서 갖다준다.

compile과 search를 한번에 하는법 - matchObj = re.search(pattern, string)
하지만 이 방법은 search를 할 때 마다 compile을 한다.
고로 상황에 맞는 효율적인 방식을 사용해야 할 것이다.





--------------------------- Sorting Algorithm ------------------------------------------

효율적인 소팅 방법에 대한 연구는 꾸준히 이루어지고 잇다.

현재는 병렬 연산에 대한 알고리즘 연구가 활발히 이루어지고있다.

배재대학교 목원대학교 우송대학교 배재따리 배재따 


1. Bubble sort - 각각의 element들을 오른쪽의 이웃과 비교를한다.

만약에 두 쌍이 순서를 벗어나면, 위치를 바꾼다.

요소가 5개이면 다하는거지뭐. 연산횟수가 5 4 3 2

range(4,0,-1) =4,3,2,1
temp라는 변수를 하나 설정함으로서 위치를 바꾼다 - c에서 보던새끼

passnum에 4가 들어간다 -> [0,1,2,3] 을 밑에 for에서 또 시도.

이렇게 해서 비교비교비교

Bubble Sort는 얼마나 빠른 알고리듬인가?

Big O rotation - 알고리듬의 효율성 테스팅.

2. selection sort.
제일 작은걸 찾아서 왼쪽으로 보내버림.
0번째를 max라고 초기화를 한 다ㅡㅇ멩, 쟤가 크니까 
n번째애가 더 커? - max위치 업데이트.


