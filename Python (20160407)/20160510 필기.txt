
(etl 참조)
변수를 받아도 안받아도 되게 만들려면 - 초기화해야함

지역변수 : 함수 내에서 선언된 변수, 혹은 함수의 입력 인수

그 함수 block안에서만 실효성 있는 변수이다.

블럭 안과 밖에 같은 이름이더라 해도 다른 변수이다

def var_test(a):
	a +=1
	b = a
	return a

a=1							
print var_test(a)
print a							// 초기화된 a가 튀어나온다.
print b


그럼 어떻게 해야하는가 - 전역변수 사용 (어디서든지 접근 가능한 변수)

a = 1
def var_test()
	global a			// 코드 블럭 밖에서도 사용 가능하게됨
	a +=1

var_test()
print a


immutable -> 정수 실수 스트링 튜플 등

call-by-value 가 일어난다. 새로 옮겨서 작업하기 때문에 함수 밖의 원래 변수에 반영이 안된다
맞춰주고싶어? -> global 선언

mutable -> call-by-reference가 일어난다.
리스트,딕셔너리

함수는 객체 - 다른변수와 동등하게 취급 가능

1. 변수에 배정가능
2. 인수로전달가능
3. 함수 - 함수 리턴가능

이름없는 함수 - 람다 표현식 (lambda expression)

f = lambda x,y: x+y
f(2,3)

출력 :5

Higher-order Functions -1

map (func,seq) 모든 sequence 하나하나에 대해 func(seq[i]) 이렇게 대입하고 출력

2

filter(bool_func,seq)
 
 def even(x):
	if x%2==0:
		return True
	else:
		return False

a \ range(10)
print even(2)
print even(1)
print filter(even,a)
-> a 다넣고 True 인 애들 출렧

3

reduce(func,seq)

def even(x)


------------------- gdp text로 실습-------------------------------------


class에서 self - reference를 넘겨주는 역할을 한다.

self를 쓰지 않으면 주소값이 없어서 밖에서 못씀

그냥 class에서 안에 새로운 함수를 만들면 무조건 self를 그냥 쓰자

상속 / 부모 class
